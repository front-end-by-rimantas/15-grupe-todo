"use strict";let todo_id=0,todo_list=[];const DOMcontainer=document.querySelector(".container"),DOMglobals=DOMcontainer.querySelector(".global-actions"),BTNremoveAll=DOMglobals.querySelector(".action.remove"),DOMform=DOMcontainer.querySelector(".form"),DOMtaskTextarea=DOMform.querySelector('textarea[name="task"]'),DOMswitchStatus=DOMform.querySelector(".switch"),DOMdeadlineInput=DOMform.querySelector('input[name="deadline"]'),DOMformActions=DOMform.querySelector(".actions"),DOMformAdd=DOMformActions.querySelector(".btn.add"),DOMformClear=DOMformActions.querySelector(".btn.clear"),DOMformSave=DOMformActions.querySelector(".btn.save"),DOMformCancel=DOMformActions.querySelector(".btn.cancel");let DOMitems=null;function renderList(list){for(let i=0;i<list.length;i++)renderTodoItem(list[i])}function renderTodoItem(data){const id="todo_"+data.id,HTML=`\n        <div class="item" id="${id}" data-task-id="${data.id}">\n            <div class="status ${data.status}"></div>\n            <p class="description">${data.description}</p>\n            <div class="deadline">${data.deadline}</div>\n            <div class="actions">\n                <div class="action remove">Remove</div>\n                <div class="action edit">Edit</div>\n            </div>\n        </div>`;DOMcontainer.insertAdjacentHTML("beforeend",HTML),DOMitems=DOMcontainer.querySelectorAll(".item");const item=DOMcontainer.querySelector("#"+id);item.querySelector(".action.remove").addEventListener("click",()=>{let currentlyAddedItemIndex=0;for(let i=0;i<DOMitems.length;i++)if(DOMitems[i].id===id){currentlyAddedItemIndex=i;break}removeTodo(currentlyAddedItemIndex)}),item.querySelector(".action.edit").addEventListener("click",()=>{DOMcontainer.classList.add("editing"),DOMform.classList.add("editing"),populateEditingForm(data.id)})}function populateEditingForm(id){let task={},i=0;for(;i<todo_list.length;i++)if(todo_list[i].id===id){task=todo_list[i];break}DOMform.setAttribute("data-task-index",i),DOMtaskTextarea.value=task.description,DOMdeadlineInput.value=task.deadline,DOMswitchStatus.setAttribute("data-selected",task.status)}function formatedDate(deltaTime=0){let now=new Date;0!==deltaTime&&(now=new Date(Date.now()+deltaTime));let minutes=now.getMinutes(),hours=now.getHours(),days=now.getDate(),month=now.getMonth()+1;const year=now.getFullYear();return minutes<10&&(minutes="0"+minutes),hours<10&&(hours="0"+hours),days<10&&(days="0"+days),month<10&&(month="0"+month),year+"-"+month+"-"+days+" "+hours+":"+minutes}function removeAllTodos(){for(let i=DOMitems.length-1;i>=0;i--)removeTodo(i)}function removeTodo(todoIndex){DOMitems[todoIndex].remove(),DOMitems=DOMcontainer.querySelectorAll(".item");let leftTodos=[];for(let i=0;i<todo_list.length;i++)i!==todoIndex&&leftTodos.push(todo_list[i]);todo_list=leftTodos,updateMemory()}function createNewTodo(){let newTodo={id:todo_id,created_on:formatedDate(),description:DOMtaskTextarea.value.trim(),deadline:DOMdeadlineInput.value.trim(),status:"todo"};return 0===newTodo.description.length?alert("ERROR: tuscias aprasymas"):newTodo.deadline.length>0&&"Invalid Date"===new Date(newTodo.deadline).toString()?alert("ERROR: nevalidus deadline"):(todo_list.push(newTodo),renderTodoItem(newTodo),todo_id++,void updateMemory())}function updateTaskInfo(){const index=parseInt(DOMform.dataset.taskIndex),description=DOMtaskTextarea.value,deadline=DOMdeadlineInput.value,status=DOMswitchStatus.dataset.selected;if(0===description.length)return alert("ERROR: tuscias aprasymas");if(deadline.length>0&&"Invalid Date"===new Date(deadline).toString())return alert("ERROR: nevalidus deadline");todo_list[index].description=description,todo_list[index].deadline=deadline,todo_list[index].status=status,updateMemory();const task_id="#todo_"+todo_list[index].id,DOMtask=DOMcontainer.querySelector(task_id);DOMtask.querySelector(".description").innerText=description,DOMtask.querySelector(".deadline").innerText=deadline;const DOMstatus=DOMtask.querySelector(".status");DOMstatus.classList.remove("todo","progress","done"),DOMstatus.classList.add(status)}function clearForm(){DOMtaskTextarea.value="",DOMswitchStatus.setAttribute("data-selected","todo"),DOMdeadlineInput.value=formatedDate(864e5),DOMcontainer.classList.remove("editing"),DOMform.classList.remove("editing")}function updateSwitch(event){const value=event.target.dataset.option;event.target.parentElement.setAttribute("data-selected",value)}function memoryManagement(){localStorage.getItem("todo_id")?todo_id=JSON.parse(localStorage.getItem("todo_id")):localStorage.setItem("todo_id",JSON.stringify(todo_id)),localStorage.getItem("todo_list")?todo_list=JSON.parse(localStorage.getItem("todo_list")):localStorage.setItem("todo_list",JSON.stringify(todo_list))}function updateMemory(){localStorage.setItem("todo_id",JSON.stringify(todo_id)),localStorage.setItem("todo_list",JSON.stringify(todo_list))}memoryManagement(),renderList(todo_list),DOMdeadlineInput.value=formatedDate(864e5),BTNremoveAll.addEventListener("click",removeAllTodos),DOMformAdd.addEventListener("click",()=>{createNewTodo(),clearForm()}),DOMformClear.addEventListener("click",clearForm),DOMswitchStatus.addEventListener("click",updateSwitch),DOMformSave.addEventListener("click",()=>{updateTaskInfo(),clearForm()}),DOMformCancel.addEventListener("click",()=>{clearForm()});